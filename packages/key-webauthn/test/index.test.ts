import { parseAuthenticatorData, decodeAuthData } from '../src/index.ts'
import { fromString } from 'uint8arrays/from-string'
describe('WebAuthn', () => {

  test('Extract public key from AuthenticatorData', async () => {
    // const chromeOutput = 'MjQ2LDEzNywyNDYsMTgzLDcyLDE0NSwxNTEsMTcwLDIwNywxLDIzLDQ3LDIsMTY4LDQ2LDcsMjEsMjQ3LDQyLDI1NSwxMTIsMjEzLDI0Nyw4OCwxODUsMTc2LDI0NywyMTEsMTUzLDE1MywxMjAsMjEwLDY5LDAsMCwwLDQsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDY0LDE3MSwzOSwxMDMsMjI2LDEwLDE0LDExMSw1MSwxMTUsMjgsMjQsNzMsMjEzLDY2LDQzLDM0LDE0OSwyMTQsODUsMjQwLDgxLDIxNiwxMzcsMTc2LDIyMCw2MiwxOTMsMTA4LDE2NiwxNDUsMzUsMjAsODksMTk4LDMxLDE5MSw1MiwxNTksMjEzLDI0Niw5NSwyMjYsMjcsODAsNDMsMjI3LDE4MSwxMjUsMTcxLDI0NCwxOTgsMTY0LDE3LDE5OCwyMywxMjAsMTEyLDEyLDU0LDE0NSwxNTAsMTA2LDEyMiwzNiwxNjUsMSwyLDMsMzgsMzIsMSwzMyw4OCwzMiwxNzgsMTI0LDIwLDQ0LDk1LDc2LDE4MiwxNiwyNDcsMjEsMTc2LDQ4LDUyLDIxMCwxMSwyMzAsMCwxNTgsOTYsMjE2LDIwMSw5Niw0OSwyNTIsMTE0LDEwMywxMzEsMTM1LDIxOSw0MiwxNjcsMTQyLDM0LDg4LDMyLDgxLDIzNiwxNjksMjExLDE2LDc1LDkwLDU4LDIxLDEyOCw5NCwxMzAsOCwyNDUsMzUsNzMsMTc3LDIyLDQ4LDE0OCw2MywyMzgsNzgsMjMwLDI1NCw5NSwyMjYsMTYsMTE0LDIwMiwxNTYsMzA='
    const chromeOutput = 'MTYzLDk5LDEwMiwxMDksMTE2LDEwMCwxMTAsMTExLDExMCwxMDEsMTAzLDk3LDExNiwxMTYsODMsMTE2LDEwOSwxMTYsMTYwLDEwNCw5NywxMTcsMTE2LDEwNCw2OCw5NywxMTYsOTcsODgsMTk2LDI0NiwxMzcsMjQ2LDE4Myw3MiwxNDUsMTUxLDE3MCwyMDcsMSwyMyw0NywyLDE2OCw0Niw3LDIxLDI0Nyw0MiwyNTUsMTEyLDIxMywyNDcsODgsMTg1LDE3NiwyNDcsMjExLDE1MywxNTMsMTIwLDIxMCw2OSwwLDAsMCw0LDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw2NCwxNzEsMzksMTAzLDIyNiwxMCwxNCwxMTEsNTEsMTE1LDI4LDI0LDczLDIxMyw2Niw0MywzNCwxNDksMjE0LDg1LDI0MCw4MSwyMTYsMTM3LDE3NiwyMjAsNjIsMTkzLDEwOCwxNjYsMTQ1LDM1LDIwLDg5LDE5OCwzMSwxOTEsNTIsMTU5LDIxMywyNDYsOTUsMjI2LDI3LDgwLDQzLDIyNywxODEsMTI1LDE3MSwyNDQsMTk4LDE2NCwxNywxOTgsMjMsMTIwLDExMiwxMiw1NCwxNDUsMTUwLDEwNiwxMjIsMzYsMTY1LDEsMiwzLDM4LDMyLDEsMzMsODgsMzIsMTc4LDEyNCwyMCw0NCw5NSw3NiwxODIsMTYsMjQ3LDIxLDE3Niw0OCw1MiwyMTAsMTEsMjMwLDAsMTU4LDk2LDIxNiwyMDEsOTYsNDksMjUyLDExNCwxMDMsMTMxLDEzNSwyMTksNDIsMTY3LDE0MiwzNCw4OCwzMiw4MSwyMzYsMTY5LDIxMSwxNiw3NSw5MCw1OCwyMSwxMjgsOTQsMTMwLDgsMjQ1LDM1LDczLDE3NywyMiw0OCwxNDgsNjMsMjM4LDc4LDIzMCwyNTQsOTUsMjI2LDE2LDExNCwyMDIsMTU2LDMw'
    const mozOutput = 'MTYzLDk5LDEwMiwxMDksMTE2LDEwMCwxMTAsMTExLDExMCwxMDEsMTAzLDk3LDExNiwxMTYsODMsMTE2LDEwOSwxMTYsMTYwLDEwNCw5NywxMTcsMTE2LDEwNCw2OCw5NywxMTYsOTcsODgsMTk2LDI0NiwxMzcsMjQ2LDE4Myw3MiwxNDUsMTUxLDE3MCwyMDcsMSwyMyw0NywyLDE2OCw0Niw3LDIxLDI0Nyw0MiwyNTUsMTEyLDIxMywyNDcsODgsMTg1LDE3NiwyNDcsMjExLDE1MywxNTMsMTIwLDIxMCw2NSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw2NCwyMiwxOTIsMjIyLDIxMCwyMTEsMTU1LDE3MiwyMjMsMTksNzUsMTQyLDI0NCwxMzcsOTgsMzMsMTgwLDE1MCwyMSw5NCw0OCwzMiwxMTYsNTcsMzQsMzMsNDAsMTUzLDIxOSwxMzQsMjcsODEsMjUwLDIzNiwxNjEsOSwyNDMsMjI3LDE0MSwxOSwyMDYsMTM5LDE5OCw3NSw2MSwxMjMsMTIsMjIyLDI0NSw0OCwxODYsMTI4LDEzMiwxMzEsNywxNDUsMTIwLDI4LDMwLDU4LDM5LDE1OSwxODMsMTI4LDQzLDE2NSwxLDIsMywzOCwzMiwxLDMzLDg4LDMyLDIyOSw3NSw0OCwxMDUsNzIsMjQsMjE4LDE4MCwyMDcsMjQzLDk5LDIxNCwxOCwxOTYsMjEwLDE0OCwxMTEsNjEsMjA1LDE4Niw4MiwyMzYsMTQ5LDIwLDg4LDMyLDQyLDEzNSwyMTQsMTA4LDE0NiwxNzcsMzQsODgsMzIsMjIwLDE3MywyNDksODUsMTQ1LDIwMywyMjUsMjUsMTk1LDE1OCwyNTMsNTIsNDUsMzcsMjE0LDc5LDIxLDkyLDEwNSwxNzksMjM2LDIyOCwxMTEsMTM1LDIzNywxMzMsMjM0LDIzNSwxOTEsMjAyLDE4MiwzMg=='
    const chex = 'a363666d74646e6f6e656761747453746d74a068617574684461746158c4f689f6b7489197aacf01172f02a82e0715f72aff70d5f758b9b0f7d3999978d24500000004000000000000000000000000000000000040ab2767e20a0e6f33731c1849d5422b2295d655f051d889b0dc3ec16ca691231459c61fbf349fd5f65fe21b502be3b57dabf4c6a411c61778700c3691966a7a24a5010203262001215820b27c142c5f4cb610f715b03034d20be6009e60d8c96031fc72678387db2aa78e22582051eca9d3104b5a3a15805e8208f52349b11630943fee4ee6fe5fe21072ca9c1e'
    const ad1 = fromString(chex, 'hex')
    const res = decodeAuthData(ad1)
    debugger
    // const res = parseAuthenticatorData(ad1)
    // const res2 = parseAuthData(fromString(mozOutput, 'base64url'))
    console.log('TEST DECODE: ', res)
  })

  test('Exports usable API', () => {
  })

  test('Decode and verify Authenticator data', () => {
  })
})

/*
describe('Ethereum PKH - Node Auth', () => {
  test('throw error when no app name given', async () => {
    const accountId = new AccountId("eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb")
    expect(() => EthereumNodeAuth.getAuthMethod({}, accountId, undefined)).rejects.toThrow("Node Auth method requires an application name")
  })
})
*/
